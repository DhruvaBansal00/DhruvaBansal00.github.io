{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/dhruva/DhruvaBansal00.github.io/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/dhruva/DhruvaBansal00.github.io/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/dhruva/DhruvaBansal00.github.io/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/dhruva/DhruvaBansal00.github.io/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nvar Updater_1 = require(\"./Particle/Updater\");\n\nvar ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nvar Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nvar Enums_1 = require(\"../Enums\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Infecter_1 = require(\"./Particle/Infecter\");\n\nvar Mover_1 = require(\"./Particle/Mover\");\n\nvar Vector_1 = require(\"./Particle/Vector\");\n\nvar Particle = /*#__PURE__*/function () {\n  function Particle(id, container, position, overrideOptions) {\n    _classCallCheck(this, Particle);\n\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.links = [];\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    var pxRatio = container.retina.pixelRatio;\n    var options = container.actualOptions;\n    var particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    var shapeType = particlesOptions.shape.type;\n    var reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      var shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        var shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n      }\n    } else {\n      var _shapeData = particlesOptions.shape.options[this.shape];\n\n      if (_shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, _shapeData instanceof Array ? Utils_1.Utils.itemFromArray(_shapeData, this.id, reduceDuplicates) : _shapeData);\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\n    container.retina.initParticle(this);\n    var color = this.options.color;\n    var sizeOptions = this.options.size;\n    var sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n    var randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\n    this.size = {\n      value: sizeValue\n    };\n    this.direction = this.options.move.direction;\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    var rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    var rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      var index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    var rotateAnimation = this.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    var sizeAnimation = this.options.size.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n\n      if (!randomSize) {\n        switch (sizeAnimation.startValue) {\n          case Enums_1.StartValueType.min:\n            this.size.value = sizeAnimation.minimumValue * pxRatio;\n            break;\n\n          case Enums_1.StartValueType.random:\n            this.size.value = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(sizeAnimation.minimumValue * pxRatio, this.size.value));\n            break;\n\n          case Enums_1.StartValueType.max:\n          default:\n            this.size.status = Enums_1.AnimationStatus.decreasing;\n            break;\n        }\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    var hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\n\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      var colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n\n    this.position = this.calcPosition(this.container, position);\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.create(0, 0);\n    var opacityOptions = this.options.opacity;\n    var randomOpacity = typeof opacityOptions.random === \"boolean\" ? opacityOptions.random : opacityOptions.random.enable;\n    this.opacity = {\n      value: Utils_1.NumberUtils.getValue(opacityOptions)\n    };\n    var opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n\n      if (!randomOpacity) {\n        switch (opacityAnimation.startValue) {\n          case Enums_1.StartValueType.min:\n            this.opacity.value = opacityAnimation.minimumValue;\n            break;\n\n          case Enums_1.StartValueType.random:\n            this.opacity.value = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(opacityAnimation.minimumValue, this.opacity.value));\n            break;\n\n          case Enums_1.StartValueType.max:\n          default:\n            this.opacity.status = Enums_1.AnimationStatus.decreasing;\n            break;\n        }\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    var drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    var imageShape = this.loadImageShape(container, drawer);\n\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    var strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      var strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n\n    var lifeOptions = particlesOptions.life;\n    this.lifeDelay = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeDelayTime = 0;\n    this.lifeDuration = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeTime = 0;\n    this.livesRemaining = particlesOptions.life.count;\n    this.spawning = this.lifeDelay > 0;\n\n    if (this.lifeDuration <= 0) {\n      this.lifeDuration = -1;\n    }\n\n    if (this.livesRemaining <= 0) {\n      this.livesRemaining = -1;\n    }\n\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.infecter = new Infecter_1.Infecter(container);\n    this.mover = new Mover_1.Mover(container, this);\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n  }\n\n  _createClass(Particle, [{\n    key: \"move\",\n    value: function move(delta) {\n      this.mover.move(delta);\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      this.updater.update(delta);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      this.container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return this.position.add(this.offset);\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      return this.bubble.radius || this.size.value;\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      var radius = this.getRadius();\n      return Math.pow(radius, 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _a;\n\n      return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.color);\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(override) {\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      this.links = [];\n\n      if (this.unbreakable) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.bubble.inRange = false;\n\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (override) {\n        return;\n      }\n\n      var destroyOptions = this.options.destroy;\n\n      if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n        this.split();\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.loops.opacity = 0;\n      this.loops.size = 0;\n    }\n  }, {\n    key: \"split\",\n    value: function split() {\n      var splitOptions = this.options.destroy.split;\n\n      if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n        return;\n      }\n\n      var rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\n\n      for (var i = 0; i < rate; i++) {\n        this.container.particles.addSplitParticle(this);\n      }\n    }\n  }, {\n    key: \"setColorAnimation\",\n    value: function setColorAnimation(colorAnimation, colorValue) {\n      if (colorAnimation.enable) {\n        colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n\n        if (colorAnimation.sync) {\n          return;\n        }\n\n        colorValue.status = Enums_1.AnimationStatus.increasing;\n        colorValue.velocity *= Math.random();\n\n        if (colorValue.value) {\n          colorValue.value *= Math.random();\n        }\n      } else {\n        colorValue.velocity = 0;\n      }\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition(container, position) {\n      var tryCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      var _a, _b;\n\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              plugin = _step2$value[1];\n\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n          if (pluginPos !== undefined) {\n            return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height);\n      var outMode = this.options.move.outMode;\n\n      if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n        if (pos.x > container.canvas.size.width - this.size.value * 2) {\n          pos.x -= this.size.value;\n        } else if (pos.x < this.size.value * 2) {\n          pos.x += this.size.value;\n        }\n      }\n\n      if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n        if (pos.y > container.canvas.size.height - this.size.value * 2) {\n          pos.y -= this.size.value;\n        } else if (pos.y < this.size.value * 2) {\n          pos.y += this.size.value;\n        }\n      }\n\n      if (this.checkOverlap(pos, tryCount)) {\n        return this.calcPosition(container, undefined, tryCount + 1);\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var overlapOptions = this.options.collisions.overlap;\n\n      if (!overlapOptions.enable) {\n        var retries = overlapOptions.retries;\n\n        if (retries >= 0 && tryCount > retries) {\n          throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n\n        var overlaps = false;\n\n        var _iterator3 = _createForOfIteratorHelper(this.container.particles.array),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var particle = _step3.value;\n\n            if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n              overlaps = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        return overlaps;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"calculateVelocity\",\n    value: function calculateVelocity() {\n      var baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\n      var res = baseVelocity.copy();\n      var moveOptions = this.options.move;\n      var rad;\n      var radOffset = Math.PI / 4;\n\n      if (typeof moveOptions.angle === \"number\") {\n        rad = Math.PI / 180 * moveOptions.angle;\n      } else {\n        rad = Math.PI / 180 * moveOptions.angle.value;\n        radOffset = Math.PI / 180 * moveOptions.angle.offset;\n      }\n\n      var range = {\n        left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\n        right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2)\n      };\n\n      if (!moveOptions.straight || moveOptions.random) {\n        res.x += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right)) / 2;\n        res.y += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right)) / 2;\n      }\n\n      return res;\n    }\n  }, {\n    key: \"loadImageShape\",\n    value: function loadImageShape(container, drawer) {\n      var _this = this;\n\n      var _a, _b, _c, _d, _e;\n\n      if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n        return;\n      }\n\n      var imageDrawer = drawer;\n      var images = imageDrawer.getImages(container).images;\n      var imageData = this.shapeData;\n      var image = (_a = images.find(function (t) {\n        return t.source === imageData.src;\n      })) !== null && _a !== void 0 ? _a : images[0];\n      var color = this.getFillColor();\n      var imageRes;\n\n      if (!image) {\n        return;\n      }\n\n      if (image.svgData !== undefined && imageData.replaceColor && color) {\n        var svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n        var svg = new Blob([svgColoredData], {\n          type: \"image/svg+xml\"\n        });\n        var domUrl = URL || window.URL || window.webkitURL || window;\n        var url = domUrl.createObjectURL(svg);\n        var img = new Image();\n        imageRes = {\n          data: image,\n          loaded: false,\n          ratio: imageData.width / imageData.height,\n          replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n          source: imageData.src\n        };\n        img.addEventListener(\"load\", function () {\n          if (_this.image) {\n            _this.image.loaded = true;\n            image.element = img;\n          }\n\n          domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", function () {\n          domUrl.revokeObjectURL(url);\n          Utils_1.Utils.loadImage(imageData.src).then(function (img2) {\n            if (_this.image && img2) {\n              image.element = img2.element;\n              _this.image.loaded = true;\n            }\n          });\n        });\n        img.src = url;\n      } else {\n        imageRes = {\n          data: image,\n          loaded: true,\n          ratio: imageData.width / imageData.height,\n          replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n          source: imageData.src\n        };\n      }\n\n      if (!imageRes.ratio) {\n        imageRes.ratio = 1;\n      }\n\n      var fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n      var close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n      return {\n        image: imageRes,\n        fill: fill,\n        close: close\n      };\n    }\n  }]);\n\n  return Particle;\n}();\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/home/dhruva/DhruvaBansal00.github.io/node_modules/tsparticles/dist/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","Updater_1","require","ParticlesOptions_1","Shape_1","Enums_1","Utils_1","Infecter_1","Mover_1","Vector_1","id","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","links","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","Utils","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","undefined","pathDelay","NumberUtils","getValue","move","path","delay","initParticle","color","sizeOptions","sizeValue","randomSize","random","enable","direction","bubble","inRange","initialVelocity","calculateVelocity","velocity","copy","rotateOptions","rotate","getRangeValue","Math","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","status","AnimationStatus","decreasing","increasing","rotateAnimation","animation","speed","reduceFactor","sync","sizeAnimation","startValue","StartValueType","min","minimumValue","randomInRange","setRangeValue","max","sizeAnimationSpeed","hslColor","ColorUtils","colorToHsl","h","s","l","colorAnimation","setColorAnimation","calcPosition","initialPosition","offset","Vector","create","opacityOptions","randomOpacity","opacityAnimation","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","sideCountFunc","getSidesCount","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","lifeOptions","life","lifeDelay","lifeDelayTime","lifeDuration","duration","lifeTime","livesRemaining","count","spawning","shadowColor","colorToRgb","shadow","updater","Updater","infecter","Infecter","mover","Mover","particleInit","delta","update","canvas","drawParticle","add","radius","getRadius","pow","getHslFromAnimation","override","plugins","plugin","particleDestroyed","destroyOptions","destroy","mode","DestroyMode","split","splitOptions","rate","i","addSplitParticle","colorValue","tryCount","pluginPos","particlePosition","x","y","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","array","particle","getDistance","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","angle","range","left","sin","right","cos","straight","ShapeType","images","imageDrawer","getImages","imageData","find","t","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","img","Image","data","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst Updater_1 = require(\"./Particle/Updater\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Infecter_1 = require(\"./Particle/Infecter\");\nconst Mover_1 = require(\"./Particle/Mover\");\nconst Vector_1 = require(\"./Particle/Vector\");\nclass Particle {\n    constructor(id, container, position, overrideOptions) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.links = [];\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.loops = {\n            opacity: 0,\n            size: 0,\n        };\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                const shapeData = shapeOptions.options[this.shape];\n                if (shapeData) {\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array\n                        ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates)\n                        : shapeData);\n                }\n            }\n        }\n        else {\n            const shapeData = particlesOptions.shape.options[this.shape];\n            if (shapeData) {\n                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n            }\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n        const randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\n        this.size = {\n            value: sizeValue,\n        };\n        this.direction = this.options.move.direction;\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: (Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const sizeAnimation = this.options.size.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            if (!randomSize) {\n                switch (sizeAnimation.startValue) {\n                    case Enums_1.StartValueType.min:\n                        this.size.value = sizeAnimation.minimumValue * pxRatio;\n                        break;\n                    case Enums_1.StartValueType.random:\n                        this.size.value = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(sizeAnimation.minimumValue * pxRatio, this.size.value));\n                        break;\n                    case Enums_1.StartValueType.max:\n                    default:\n                        this.size.status = Enums_1.AnimationStatus.decreasing;\n                        break;\n                }\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        const hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = {\n                h: {\n                    value: hslColor.h,\n                },\n                s: {\n                    value: hslColor.s,\n                },\n                l: {\n                    value: hslColor.l,\n                },\n            };\n            const colorAnimation = this.options.color.animation;\n            this.setColorAnimation(colorAnimation.h, this.color.h);\n            this.setColorAnimation(colorAnimation.s, this.color.s);\n            this.setColorAnimation(colorAnimation.l, this.color.l);\n        }\n        this.position = this.calcPosition(this.container, position);\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.create(0, 0);\n        const opacityOptions = this.options.opacity;\n        const randomOpacity = typeof opacityOptions.random === \"boolean\" ? opacityOptions.random : opacityOptions.random.enable;\n        this.opacity = {\n            value: Utils_1.NumberUtils.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            if (!randomOpacity) {\n                switch (opacityAnimation.startValue) {\n                    case Enums_1.StartValueType.min:\n                        this.opacity.value = opacityAnimation.minimumValue;\n                        break;\n                    case Enums_1.StartValueType.random:\n                        this.opacity.value = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(opacityAnimation.minimumValue, this.opacity.value));\n                        break;\n                    case Enums_1.StartValueType.max:\n                    default:\n                        this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                        break;\n                }\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        const imageShape = this.loadImageShape(container, drawer);\n        if (imageShape) {\n            this.image = imageShape.image;\n            this.fill = imageShape.fill;\n            this.close = imageShape.close;\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = {\n                h: {\n                    value: strokeHslColor.h,\n                },\n                s: {\n                    value: strokeHslColor.s,\n                },\n                l: {\n                    value: strokeHslColor.l,\n                },\n            };\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n            }\n        }\n        const lifeOptions = particlesOptions.life;\n        this.lifeDelay = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeDelayTime = 0;\n        this.lifeDuration = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeTime = 0;\n        this.livesRemaining = particlesOptions.life.count;\n        this.spawning = this.lifeDelay > 0;\n        if (this.lifeDuration <= 0) {\n            this.lifeDuration = -1;\n        }\n        if (this.livesRemaining <= 0) {\n            this.livesRemaining = -1;\n        }\n        this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n        this.updater = new Updater_1.Updater(container, this);\n        this.infecter = new Infecter_1.Infecter(container);\n        this.mover = new Mover_1.Mover(container, this);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n    }\n    move(delta) {\n        this.mover.move(delta);\n    }\n    update(delta) {\n        this.updater.update(delta);\n    }\n    draw(delta) {\n        this.container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return this.position.add(this.offset);\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a;\n        return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.color);\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.links = [];\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.loops.opacity = 0;\n        this.loops.size = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    setColorAnimation(colorAnimation, colorValue) {\n        if (colorAnimation.enable) {\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\n            if (colorAnimation.sync) {\n                return;\n            }\n            colorValue.status = Enums_1.AnimationStatus.increasing;\n            colorValue.velocity *= Math.random();\n            if (colorValue.value) {\n                colorValue.value *= Math.random();\n            }\n        }\n        else {\n            colorValue.velocity = 0;\n        }\n    }\n    calcPosition(container, position, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\n            }\n        }\n        const pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height);\n        const outMode = this.options.move.outMode;\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        let rad;\n        let radOffset = Math.PI / 4;\n        if (typeof moveOptions.angle === \"number\") {\n            rad = (Math.PI / 180) * moveOptions.angle;\n        }\n        else {\n            rad = (Math.PI / 180) * moveOptions.angle.value;\n            radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        }\n        const range = {\n            left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\n            right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2),\n        };\n        if (!moveOptions.straight || moveOptions.random) {\n            res.x += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right)) / 2;\n            res.y += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right)) / 2;\n        }\n        return res;\n    }\n    loadImageShape(container, drawer) {\n        var _a, _b, _c, _d, _e;\n        if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n            return;\n        }\n        const imageDrawer = drawer;\n        const images = imageDrawer.getImages(container).images;\n        const imageData = this.shapeData;\n        const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n        const color = this.getFillColor();\n        let imageRes;\n        if (!image) {\n            return;\n        }\n        if (image.svgData !== undefined && imageData.replaceColor && color) {\n            const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n            const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\n            const domUrl = URL || window.URL || window.webkitURL || window;\n            const url = domUrl.createObjectURL(svg);\n            const img = new Image();\n            imageRes = {\n                data: image,\n                loaded: false,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n                source: imageData.src,\n            };\n            img.addEventListener(\"load\", () => {\n                if (this.image) {\n                    this.image.loaded = true;\n                    image.element = img;\n                }\n                domUrl.revokeObjectURL(url);\n            });\n            img.addEventListener(\"error\", () => {\n                domUrl.revokeObjectURL(url);\n                Utils_1.Utils.loadImage(imageData.src).then((img2) => {\n                    if (this.image && img2) {\n                        image.element = img2.element;\n                        this.image.loaded = true;\n                    }\n                });\n            });\n            img.src = url;\n        }\n        else {\n            imageRes = {\n                data: image,\n                loaded: true,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n        const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n        return {\n            image: imageRes,\n            fill,\n            close,\n        };\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}