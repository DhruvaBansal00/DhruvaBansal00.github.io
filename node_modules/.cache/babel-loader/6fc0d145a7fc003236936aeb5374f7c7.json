{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/dhruva/Desktop/DhruvaBansal00.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nconst Particle_1 = require(\"./Particle\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nclass Particles {\n  constructor(container) {\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.limit = 0;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  init() {\n    const container = this.container;\n    const options = container.actualOptions;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    let handled = false;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = options.manualParticles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const particle = _step.value;\n        const pos = particle.position ? {\n          x: particle.position.x * container.canvas.size.width / 100,\n          y: particle.position.y * container.canvas.size.height / 100\n        } : undefined;\n        this.addParticle(pos, particle.options);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = container.plugins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        const _step2$value = _slicedToArray(_step2.value, 2),\n              plugin = _step2$value[1];\n\n        if (plugin.particlesInitialization !== undefined) {\n          handled = plugin.particlesInitialization();\n        }\n\n        if (handled) {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    if (!handled) {\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    if (options.infection.enable) {\n      for (let i = 0; i < options.infection.infections; i++) {\n        const notInfected = this.array.filter(p => p.infecter.infectionStage === undefined);\n        const infected = Utils_1.Utils.itemFromArray(notInfected);\n        infected.infecter.startInfection(0);\n      }\n    }\n\n    this.interactionManager.init();\n    container.pathGenerator.init();\n  }\n\n  redraw() {\n    this.clear();\n    this.init();\n    this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  removeAt(index, quantity, override) {\n    if (index >= 0 && index <= this.count) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          const particle = _step3.value;\n          particle.destroy(override);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }\n\n  remove(particle, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, override);\n  }\n\n  update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.pathGenerator.update();\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = container.plugins[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        const _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n        if (plugin.update !== undefined) {\n          plugin.update(delta);\n        }\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n      for (var _iterator5 = this.array[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n        const particle = _step5.value;\n        const resizeFactor = this.container.canvas.resizeFactor;\n\n        if (resizeFactor) {\n          particle.position.x *= resizeFactor.width;\n          particle.position.y *= resizeFactor.height;\n        }\n\n        particle.move(delta);\n\n        if (particle.destroyed) {\n          particlesToDelete.push(particle);\n          continue;\n        }\n\n        this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n      }\n    } catch (err) {\n      _didIteratorError5 = true;\n      _iteratorError5 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n          _iterator5.return();\n        }\n      } finally {\n        if (_didIteratorError5) {\n          throw _iteratorError5;\n        }\n      }\n    }\n\n    for (var _i = 0, _particlesToDelete = particlesToDelete; _i < _particlesToDelete.length; _i++) {\n      const particle = _particlesToDelete[_i];\n      this.remove(particle);\n    }\n\n    this.interactionManager.externalInteract(delta);\n    var _iteratorNormalCompletion6 = true;\n    var _didIteratorError6 = false;\n    var _iteratorError6 = undefined;\n\n    try {\n      for (var _iterator6 = this.container.particles.array[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n        const particle = _step6.value;\n        particle.update(delta);\n\n        if (!particle.destroyed && !particle.spawning) {\n          this.interactionManager.particlesInteract(particle, delta);\n        }\n      }\n    } catch (err) {\n      _didIteratorError6 = true;\n      _iteratorError6 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n          _iterator6.return();\n        }\n      } finally {\n        if (_didIteratorError6) {\n          throw _iteratorError6;\n        }\n      }\n    }\n\n    delete container.canvas.resizeFactor;\n  }\n\n  draw(delta) {\n    const container = this.container;\n    container.canvas.clear();\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.update(delta);\n    var _iteratorNormalCompletion7 = true;\n    var _didIteratorError7 = false;\n    var _iteratorError7 = undefined;\n\n    try {\n      for (var _iterator7 = container.plugins[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n        const _step7$value = _slicedToArray(_step7.value, 2),\n              plugin = _step7$value[1];\n\n        container.canvas.drawPlugin(plugin, delta);\n      }\n    } catch (err) {\n      _didIteratorError7 = true;\n      _iteratorError7 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n          _iterator7.return();\n        }\n      } finally {\n        if (_didIteratorError7) {\n          throw _iteratorError7;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion8 = true;\n    var _didIteratorError8 = false;\n    var _iteratorError8 = undefined;\n\n    try {\n      for (var _iterator8 = this.array[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n        const p = _step8.value;\n        p.draw(delta);\n      }\n    } catch (err) {\n      _didIteratorError8 = true;\n      _iteratorError8 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n          _iterator8.return();\n        }\n      } finally {\n        if (_didIteratorError8) {\n          throw _iteratorError8;\n        }\n      }\n    }\n  }\n\n  clear() {\n    this.array = [];\n  }\n\n  push(nb, mouse, overrideOptions) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const limit = options.particles.number.limit * container.density;\n    this.pushing = true;\n\n    if (limit > 0) {\n      const countToRemove = this.count + nb - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n    }\n\n    this.pushing = false;\n  }\n\n  addParticle(position, overrideOptions) {\n    return this.pushParticle(position, overrideOptions);\n  }\n\n  addSplitParticle(parent) {\n    const splitOptions = parent.options.destroy.split;\n    const options = new ParticlesOptions_1.ParticlesOptions();\n    options.load(parent.options);\n    const factor = Utils_1.NumberUtils.getRangeValue(splitOptions.factor.value);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n\n    options.load(splitOptions.particles);\n    const offset = Utils_1.NumberUtils.setRangeValue(-parent.size.value, parent.size.value);\n    const position = {\n      x: parent.position.x + Utils_1.NumberUtils.randomInRange(offset),\n      y: parent.position.y + Utils_1.NumberUtils.randomInRange(offset)\n    };\n    return this.pushParticle(position, options, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n\n      particle.velocity.length = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n\n  removeQuantity(quantity) {\n    this.removeAt(0, quantity);\n  }\n\n  getLinkFrequency(p1, p2) {\n    const key = \"\".concat(Math.min(p1.id, p2.id), \"_\").concat(Math.max(p1.id, p2.id));\n    let res = this.linksFreq.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.linksFreq.set(key, res);\n    }\n\n    return res;\n  }\n\n  getTriangleFrequency(p1, p2, p3) {\n    let _ref = [p1.id, p2.id, p3.id],\n        id1 = _ref[0],\n        id2 = _ref[1],\n        id3 = _ref[2];\n\n    if (id1 > id2) {\n      var _ref2 = [id1, id2];\n      id2 = _ref2[0];\n      id1 = _ref2[1];\n    }\n\n    if (id2 > id3) {\n      var _ref3 = [id2, id3];\n      id3 = _ref3[0];\n      id2 = _ref3[1];\n    }\n\n    if (id1 > id3) {\n      var _ref4 = [id1, id3];\n      id3 = _ref4[0];\n      id1 = _ref4[1];\n    }\n\n    const key = \"\".concat(id1, \"_\").concat(id2, \"_\").concat(id3);\n    let res = this.trianglesFreq.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.trianglesFreq.set(key, res);\n    }\n\n    return res;\n  }\n\n  setDensity() {\n    const options = this.container.actualOptions;\n    this.applyDensity(options.particles);\n  }\n\n  applyDensity(options) {\n    var _a;\n\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n\n    const numberOptions = options.number;\n    const densityFactor = this.initDensityFactor(numberOptions.density);\n    const optParticlesNumber = numberOptions.value;\n    const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n    const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;\n    const particlesCount = this.count;\n    this.limit = numberOptions.limit * densityFactor;\n\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber);\n    }\n  }\n\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n\n    const canvas = container.canvas.element;\n    const pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);\n  }\n\n  pushParticle(position, overrideOptions, initializer) {\n    try {\n      const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n      let canAdd = true;\n\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n\n      if (!canAdd) {\n        return;\n      }\n\n      this.array.push(particle);\n      this.nextId++;\n      return particle;\n    } catch (e) {\n      console.warn(\"error adding particle: \".concat(e));\n      return;\n    }\n  }\n\n}\n\nexports.Particles = Particles;","map":{"version":3,"sources":["/home/dhruva/Desktop/DhruvaBansal00.github.io/node_modules/tsparticles/dist/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","ParticlesOptions_1","constructor","container","nextId","array","limit","linksFreq","Map","trianglesFreq","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","count","length","init","options","actualOptions","handled","manualParticles","particle","pos","position","x","y","undefined","addParticle","plugins","plugin","particlesInitialization","i","particles","number","infection","enable","infections","notInfected","filter","p","infecter","infectionStage","infected","Utils","itemFromArray","startInfection","pathGenerator","redraw","clear","draw","factor","removeAt","index","quantity","override","splice","destroy","remove","indexOf","update","delta","particlesToDelete","resizeFactor","move","destroyed","push","insert","Point","getPosition","externalInteract","spawning","particlesInteract","drawPlugin","nb","mouse","overrideOptions","density","pushing","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitOptions","split","ParticlesOptions","load","NumberUtils","getRangeValue","color","hsl","getFillColor","min","max","offset","setRangeValue","randomInRange","velocity","splitCount","unbreakable","setTimeout","getLinkFrequency","p1","p2","key","Math","id","res","get","random","set","getTriangleFrequency","p3","id1","id2","id3","setDensity","applyDensity","_a","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","Particle","canAdd","e","console","warn"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.nextId = 0;\n        this.array = [];\n        this.limit = 0;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        const container = this.container;\n        const options = container.actualOptions;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        let handled = false;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (!handled) {\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        if (options.infection.enable) {\n            for (let i = 0; i < options.infection.infections; i++) {\n                const notInfected = this.array.filter((p) => p.infecter.infectionStage === undefined);\n                const infected = Utils_1.Utils.itemFromArray(notInfected);\n                infected.infecter.startInfection(0);\n            }\n        }\n        this.interactionManager.init();\n        container.pathGenerator.init();\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity, override) {\n        if (index >= 0 && index <= this.count) {\n            for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n                particle.destroy(override);\n            }\n        }\n    }\n    remove(particle, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, override);\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = this.container.canvas.resizeFactor;\n            if (resizeFactor) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.move(delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of this.container.particles.array) {\n            particle.update(delta);\n            if (!particle.destroyed && !particle.spawning) {\n                this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.array) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n    }\n    push(nb, mouse, overrideOptions) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const limit = options.particles.number.limit * container.density;\n        this.pushing = true;\n        if (limit > 0) {\n            const countToRemove = this.count + nb - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions) {\n        return this.pushParticle(position, overrideOptions);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split;\n        const options = new ParticlesOptions_1.ParticlesOptions();\n        options.load(parent.options);\n        const factor = Utils_1.NumberUtils.getRangeValue(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = Utils_1.NumberUtils.setRangeValue(-parent.size.value, parent.size.value);\n        const position = {\n            x: parent.position.x + Utils_1.NumberUtils.randomInRange(offset),\n            y: parent.position.y + Utils_1.NumberUtils.randomInRange(offset),\n        };\n        return this.pushParticle(position, options, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity) {\n        this.removeAt(0, quantity);\n    }\n    getLinkFrequency(p1, p2) {\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n        let res = this.linksFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.linksFreq.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.trianglesFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.trianglesFreq.set(key, res);\n        }\n        return res;\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        this.applyDensity(options.particles);\n    }\n    applyDensity(options) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;\n        const particlesCount = this.count;\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element;\n        const pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, initializer) {\n        try {\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\nexports.Particles = Particles;\n"]},"metadata":{},"sourceType":"script"}