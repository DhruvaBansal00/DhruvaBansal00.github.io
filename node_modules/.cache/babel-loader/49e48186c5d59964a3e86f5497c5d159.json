{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.isNestedStyle = isNestedStyle;\nexports.mergeStyles = mergeStyles;\n\nfunction isNestedStyle(value) {\n  // Don't merge objects overriding toString, since they should be converted\n  // to string values.\n  return value && value.constructor === Object && value.toString === Object.prototype.toString;\n} // Merge style objects. Deep merge plain object values.\n\n\nfunction mergeStyles(styles) {\n  var result = {};\n  styles.forEach(function (style) {\n    if (!style || (typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object') {\n      return;\n    }\n\n    if (Array.isArray(style)) {\n      style = mergeStyles(style);\n    }\n\n    Object.keys(style).forEach(function (key) {\n      // Simple case, nothing nested\n      if (!isNestedStyle(style[key]) || !isNestedStyle(result[key])) {\n        result[key] = style[key];\n        return;\n      } // If nested media, don't merge the nested styles, append a space to the\n      // end (benign when converted to CSS). This way we don't end up merging\n      // media queries that appear later in the chain with those that appear\n      // earlier.\n\n\n      if (key.indexOf('@media') === 0) {\n        var newKey = key; // eslint-disable-next-line no-constant-condition\n\n        while (true) {\n          newKey += ' ';\n\n          if (!result[newKey]) {\n            result[newKey] = style[key];\n            return;\n          }\n        }\n      } // Merge all other nested styles recursively\n\n\n      result[key] = mergeStyles([result[key], style[key]]);\n    });\n  });\n  return result;\n}","map":{"version":3,"sources":["/home/dhruva/DhruvaBansal00.github.io/node_modules/radium/lib/merge-styles.js"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","isNestedStyle","mergeStyles","toString","styles","result","forEach","style","Array","isArray","keys","key","indexOf","newKey"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,OAAO,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA3D,GAAsE,UAAUC,GAAV,EAAe;AAAE,SAAO,OAAOA,GAAd;AAAoB,CAA3G,GAA8G,UAAUA,GAAV,EAAe;AAAE,SAAOA,GAAG,IAAI,OAAOF,MAAP,KAAkB,UAAzB,IAAuCE,GAAG,CAACC,WAAJ,KAAoBH,MAA3D,IAAqEE,GAAG,KAAKF,MAAM,CAACI,SAApF,GAAgG,QAAhG,GAA2G,OAAOF,GAAzH;AAA+H,CAA5Q;;AAEAL,OAAO,CAACQ,aAAR,GAAwBA,aAAxB;AACAR,OAAO,CAACS,WAAR,GAAsBA,WAAtB;;AACA,SAASD,aAAT,CAAuBP,KAAvB,EAA8B;AAC5B;AACA;AACA,SAAOA,KAAK,IAAIA,KAAK,CAACK,WAAN,KAAsBR,MAA/B,IAAyCG,KAAK,CAACS,QAAN,KAAmBZ,MAAM,CAACS,SAAP,CAAiBG,QAApF;AACD,C,CAED;;;AACA,SAASD,WAAT,CAAqBE,MAArB,EAA6B;AAC3B,MAAIC,MAAM,GAAG,EAAb;AAEAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAAUC,KAAV,EAAiB;AAC9B,QAAI,CAACA,KAAD,IAAU,CAAC,OAAOA,KAAP,KAAiB,WAAjB,GAA+B,WAA/B,GAA6CZ,OAAO,CAACY,KAAD,CAArD,MAAkE,QAAhF,EAA0F;AACxF;AACD;;AAED,QAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBA,MAAAA,KAAK,GAAGL,WAAW,CAACK,KAAD,CAAnB;AACD;;AAEDhB,IAAAA,MAAM,CAACmB,IAAP,CAAYH,KAAZ,EAAmBD,OAAnB,CAA2B,UAAUK,GAAV,EAAe;AACxC;AACA,UAAI,CAACV,aAAa,CAACM,KAAK,CAACI,GAAD,CAAN,CAAd,IAA8B,CAACV,aAAa,CAACI,MAAM,CAACM,GAAD,CAAP,CAAhD,EAA+D;AAC7DN,QAAAA,MAAM,CAACM,GAAD,CAAN,GAAcJ,KAAK,CAACI,GAAD,CAAnB;AACA;AACD,OALuC,CAOxC;AACA;AACA;AACA;;;AACA,UAAIA,GAAG,CAACC,OAAJ,CAAY,QAAZ,MAA0B,CAA9B,EAAiC;AAC/B,YAAIC,MAAM,GAAGF,GAAb,CAD+B,CAE/B;;AACA,eAAO,IAAP,EAAa;AACXE,UAAAA,MAAM,IAAI,GAAV;;AACA,cAAI,CAACR,MAAM,CAACQ,MAAD,CAAX,EAAqB;AACnBR,YAAAA,MAAM,CAACQ,MAAD,CAAN,GAAiBN,KAAK,CAACI,GAAD,CAAtB;AACA;AACD;AACF;AACF,OArBuC,CAuBxC;;;AACAN,MAAAA,MAAM,CAACM,GAAD,CAAN,GAAcT,WAAW,CAAC,CAACG,MAAM,CAACM,GAAD,CAAP,EAAcJ,KAAK,CAACI,GAAD,CAAnB,CAAD,CAAzB;AACD,KAzBD;AA0BD,GAnCD;AAqCA,SAAON,MAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.isNestedStyle = isNestedStyle;\nexports.mergeStyles = mergeStyles;\nfunction isNestedStyle(value) {\n  // Don't merge objects overriding toString, since they should be converted\n  // to string values.\n  return value && value.constructor === Object && value.toString === Object.prototype.toString;\n}\n\n// Merge style objects. Deep merge plain object values.\nfunction mergeStyles(styles) {\n  var result = {};\n\n  styles.forEach(function (style) {\n    if (!style || (typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object') {\n      return;\n    }\n\n    if (Array.isArray(style)) {\n      style = mergeStyles(style);\n    }\n\n    Object.keys(style).forEach(function (key) {\n      // Simple case, nothing nested\n      if (!isNestedStyle(style[key]) || !isNestedStyle(result[key])) {\n        result[key] = style[key];\n        return;\n      }\n\n      // If nested media, don't merge the nested styles, append a space to the\n      // end (benign when converted to CSS). This way we don't end up merging\n      // media queries that appear later in the chain with those that appear\n      // earlier.\n      if (key.indexOf('@media') === 0) {\n        var newKey = key;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          newKey += ' ';\n          if (!result[newKey]) {\n            result[newKey] = style[key];\n            return;\n          }\n        }\n      }\n\n      // Merge all other nested styles recursively\n      result[key] = mergeStyles([result[key], style[key]]);\n    });\n  });\n\n  return result;\n}"]},"metadata":{},"sourceType":"script"}