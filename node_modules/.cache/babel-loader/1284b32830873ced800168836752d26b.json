{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\n\nclass Infecter {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    return this.container.actualOptions.infection.enable;\n  }\n\n  reset() {}\n\n  interact(p1, delta) {\n    var _a, _b;\n\n    const infecter1 = p1.infecter;\n    infecter1.updateInfection(delta.value);\n\n    if (infecter1.infectionStage === undefined) {\n      return;\n    }\n\n    const container = this.container;\n    const options = container.actualOptions;\n    const infectionOptions = options.infection;\n\n    if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n      return;\n    }\n\n    const infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n    const pxRatio = container.retina.pixelRatio;\n    const radius = p1.getRadius() * 2 + infectionStage1.radius * pxRatio;\n    const pos = p1.getPosition();\n    const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n    const query = container.particles.quadTree.queryCircle(pos, radius);\n    const infections = infectionStage1.rate;\n    const neighbors = query.length;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = query[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const p2 = _step.value;\n\n        if (p2 === p1 || p2.destroyed || p2.spawning || !(p2.infecter.infectionStage === undefined || p2.infecter.infectionStage !== infecter1.infectionStage)) {\n          continue;\n        }\n\n        const infecter2 = p2.infecter;\n\n        if (Math.random() < infections / neighbors) {\n          if (infecter2.infectionStage === undefined) {\n            infecter2.startInfection(infectedStage1);\n          } else if (infecter2.infectionStage < infecter1.infectionStage) {\n            infecter2.updateInfectionStage(infectedStage1);\n          } else if (infecter2.infectionStage > infecter1.infectionStage) {\n            const infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n            const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n            infecter1.updateInfectionStage(infectedStage2);\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n}\n\nexports.Infecter = Infecter;","map":{"version":3,"sources":["/home/dhruva/Desktop/DhruvaBansal00.github.io/node_modules/tsparticles/dist/Interactions/Particles/Infecter.js"],"names":["Object","defineProperty","exports","value","Infecter","constructor","container","isEnabled","actualOptions","infection","enable","reset","interact","p1","delta","_a","_b","infecter1","infecter","updateInfection","infectionStage","undefined","options","infectionOptions","stages","length","infectionStage1","pxRatio","retina","pixelRatio","radius","getRadius","pos","getPosition","infectedStage1","infectedStage","query","particles","quadTree","queryCircle","infections","rate","neighbors","p2","destroyed","spawning","infecter2","Math","random","startInfection","updateInfectionStage","infectionStage2","infectedStage2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Infecter = void 0;\nclass Infecter {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        return this.container.actualOptions.infection.enable;\n    }\n    reset() {\n    }\n    interact(p1, delta) {\n        var _a, _b;\n        const infecter1 = p1.infecter;\n        infecter1.updateInfection(delta.value);\n        if (infecter1.infectionStage === undefined) {\n            return;\n        }\n        const container = this.container;\n        const options = container.actualOptions;\n        const infectionOptions = options.infection;\n        if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n            return;\n        }\n        const infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n        const pxRatio = container.retina.pixelRatio;\n        const radius = p1.getRadius() * 2 + infectionStage1.radius * pxRatio;\n        const pos = p1.getPosition();\n        const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n        const query = container.particles.quadTree.queryCircle(pos, radius);\n        const infections = infectionStage1.rate;\n        const neighbors = query.length;\n        for (const p2 of query) {\n            if (p2 === p1 ||\n                p2.destroyed ||\n                p2.spawning ||\n                !(p2.infecter.infectionStage === undefined || p2.infecter.infectionStage !== infecter1.infectionStage)) {\n                continue;\n            }\n            const infecter2 = p2.infecter;\n            if (Math.random() < infections / neighbors) {\n                if (infecter2.infectionStage === undefined) {\n                    infecter2.startInfection(infectedStage1);\n                }\n                else if (infecter2.infectionStage < infecter1.infectionStage) {\n                    infecter2.updateInfectionStage(infectedStage1);\n                }\n                else if (infecter2.infectionStage > infecter1.infectionStage) {\n                    const infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n                    const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n                    infecter1.updateInfectionStage(infectedStage2);\n                }\n            }\n        }\n    }\n}\nexports.Infecter = Infecter;\n"]},"metadata":{},"sourceType":"script"}